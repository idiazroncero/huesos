/*
Button

Either `<input type="submit / ">`, `<button>` or `<a class="button">`

Markup:
<button class="{{modifier_class}}">Click me please!</button>
<a href="#" class="button {{modifier_class}}">I'm a link!</a>
<input type="submit" class="{{modifier_class}}" value="Submit input" />

.button--success           - Uses success color to indicate a positive action (OK, login, continue...)
.button--warning           - Uses warning color to indicate a potentially negative action
.button--error             - Uses error color to indicate a negative action (delete, cancel, no...)
.disabled          		   - The helper class `.disabled` knows how to erase user interaction on buttons
.button--error.disabled             - .disabled and the rest of the modifiers can be safely applied at the same time


Styleguide Components.buttons
*/

input[type=submit],
input[type=reset],
input[type=button],
button,
.button {
	@include form-reset-button();
	cursor:pointer;
	border: $button-border;
	border-radius: $button-border-radius;
	display: inline-block;
	padding: 0 ritmo(2);
	text-transform: uppercase;
	letter-spacing: 0.05rem;
	@include ritmo-font-size($h6-font-size, 5);
	&:hover,
	&:focus {
		background:$button-border-color;
		color: contrast-color($button-border-color);
	}
}

// Links as buttons
a.button {
	@include kill-link();
	@include kill-link-decoration();
	&:hover,
	&:focus {
		color: contrast-color($button-border-color);
	}
}

.button--success,
a.button--success:link,
input.button--success {
	border-color: get-color(state, success);
	color: get-color(state, success);
	&:hover,
	&:focus {
		background:get-color(state, success);
		color: contrast-color(get-color(state, success));
	}	
}

.button--warning,
a.button--warning:link,
input.button--warning {
	border-color: get-color(state, warning);
	color: get-color(state, warning);
	&:hover,
	&:focus {
		background:get-color(state, warning);
		color: contrast-color(get-color(state, warning));
	}	
}

.button--error,
a.button--error:link,
input.button--error {
	border-color: get-color(state, error);
	color: get-color(state, error);
	&:hover,
	&:focus {
		background:get-color(state, error);
		color: contrast-color(get-color(state, error));
	}	
}

input[type=submit][disabled],
input[type=reset][disabled],
input[type=button][disabled],
button[disabled],
button.disabled,
a.disabled:link,
input.disabled {
	opacity: $disabled-opacity;
    color:inherit;
    cursor: initial;
	&:hover, 
	&:focus {
        background: none;
        color:inherit;
        cursor: initial;
	}
	&.button--error {
		color: get-color(state, error);
	}
	&.button--warning {
		color: get-color(state, warning);
	}
	&.button--success {
		color: get-color(state, success);
	}
}