/*
Button

Either `<input type="submit / ">`, `<button>` or `<a class="button">`.

There are three general strategies available. `border`, `background` and `mixed`

Markup:
<button class="{{modifier_class}}">Click me please!</button>
<a href="#" class="button {{modifier_class}}">I'm a link!</a>
<input type="submit" class="{{modifier_class}}" value="Submit input" />

.button--success           - Uses success color to indicate a positive action (OK, login, continue...)
.button--warning           - Uses warning color to indicate a potentially negative action
.button--error             - Uses error color to indicate a negative action (delete, cancel, no...)
.disabled          		   - The helper class `.disabled` knows how to erase user interaction on buttons
.button--error.disabled             - .disabled and the rest of the modifiers can be safely applied at the same time


Styleguide Components.buttons
*/


// Specific overrides for links
a.button {
	@include kill-link-decoration();
	@if $button-strategy == 'border' {
		@if $button-strategy-border == 'fill' {
			border: $button-border;
			&:link,
			&:visited {
				color: $button-color;
			}		
			&:hover,
			&:focus {
				border: $button-border;
				background:$button-color;
				color: contrast-color($button-color);
			}			
		} @else if $button-strategy-border == 'highlight' {
			&:link,
			&:visited {
				color: lighten-color($button-color);
			}
			&:hover,
			&:focus {
				color: darken-color($button-color);
				border: $button-border-width solid darken-color($button-color);
			}
		}
	} @else if $button-strategy == 'background' {
		border:none;
		@if $button-invert-color {
			@include set-link(
				contrast-color($button-color),
				contrast-color($button-color),
				contrast-color(lighten-color($button-color)),
				contrast-color($button-color),
			)
		} @else {
			@include set-link(
				contrast-color($button-color),
				contrast-color($button-color),
				contrast-color($button-color),
				contrast-color($button-color),
			)			
		}
		&:hover,
		&:focus {
			background-color: lighten-color($button-color);
		}
	}
}


input[type=submit],
input[type=reset],
input[type=button],
button,
.button {
	@include form-reset-button();
	cursor:pointer;
	@include ritmo-font-size($h6-font-size, 5);
	display: inline-block;
	padding: 0 ritmo(2);
	text-transform: uppercase;
	letter-spacing: 0.05rem;
	vertical-align:middle;
	font-weight: $button-weight;
	@if $button-strategy == 'border' {
		border-radius: $button-border-radius;
		@if $button-strategy-border == 'fill' {
			border: $button-border;
			color: $button-color;
			&:hover,
			&:focus {
				background:$button-color;
				color: contrast-color($button-color);
			}				
		} @else if $button-strategy-border == 'highlight' {
			border: $button-border-width solid lighten-color($button-color);
			color: lighten-color($button-color);
			&:hover,
			&:focus {
				border-color: darken-color($button-color);
				color: darken-color($button-color);
			}
		}
	} @else if $button-strategy == 'background' {
		border:none;
		line-height:ritmo(6);
		background-color:$button-color;
		color: contrast-color($button-color);
		&:hover,
		&:focus {
			background-color: lighten-color($button-color);
			@if $button-invert-color {
				color: contrast-color(lighten-color($button-color));
			}
		}
	}
	// We need to take icons into consideration!
	.icon {
		@include ritmo-font-size($h6-font-size);
		height: $h6-font-size;
		line-height:1;
		svg {
			fill:currentColor;
		}
	}
}

// Loop through the states and apply rules:

$states: map-get($colors, state);

@each $state, $value in $states {
	.button--#{$state},
	input.button--#{$state} {
		// For links
		@if $button-strategy == 'border' {
			@if $button-strategy-border == 'fill' {
				border-color: get-color(state, #{$state});
				color: get-color(state, #{$state});
				&:hover,
				&:focus {
					background:get-color(state, #{$state});
					color: contrast-color(get-color(state, #{$state}));
				}				
			} @else if $button-strategy-border == 'highlight' {
				border: $button-border-width solid lighten-color(get-color(state, #{$state}));
				color: lighten-color(get-color(state, #{$state}));
				&:hover,
				&:focus {
					border-color: darken-color(get-color(state, #{$state}));
					color: darken-color(get-color(state, #{$state}));
				}
			}
		} @else if $button-strategy == 'background' {
			background-color:get-color(state, #{$state});
			color: contrast-color(get-color(state, #{$state}));
			&:hover,
			&:focus {
				background-color: lighten-color(get-color(state, #{$state}));
				@if $button-invert-color {
					color: contrast-color(lighten-color(get-color(state, #{$state})));
				}
			}
		}
	}

	a.button--#{$state} {
		@if $button-strategy == 'border' {
			@if $button-strategy-border == 'fill' {
				border-color: get-color(state, #{$state});
				&:link,
				&:visited {
					color: get-color(state, #{$state});
				}	
				&:hover,
				&:focus {
					border-color: get-color(state, #{$state});
					background:get-color(state, #{$state});
					color: contrast-color(get-color(state, #{$state}));
				}		
			} @else if $button-strategy-border == 'highlight' {
				&:link,
				&:visited {
					color: lighten-color(get-color(state, #{$state}));
				}
				&:hover,
				&:focus {
					border-color: darken-color(get-color(state, #{$state}));
					color: darken-color(get-color(state, #{$state}));
				}
			}
		} @else if $button-strategy == 'background' {
			@if $button-invert-color {
				@include set-link(
					contrast-color(get-color(state, #{$state})),
					contrast-color(get-color(state, #{$state})),
					contrast-color(lighten-color(get-color(state, #{$state}))),
					contrast-color(get-color(state, #{$state})),
				)
			} @else {
				@include set-link(
					contrast-color(get-color(state, #{$state})),
					contrast-color(get-color(state, #{$state})),
					contrast-color(get-color(state, #{$state})),
					contrast-color(get-color(state, #{$state})),
				)
			}
			&:hover,
			&:focus {
				background-color: lighten-color(get-color(state, #{$state}));
			}
		}	
	}
}


input[type=submit][disabled],
input[type=reset][disabled],
input[type=button][disabled],
button[disabled],
button.disabled,
a.button.disabled,
input.disabled {
	opacity: $disabled-opacity;
	cursor: arrow;
	pointer-events:none;
	&:hover, 
	&:focus {
        cursor: arrow;
	}
}