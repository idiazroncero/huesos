// Recursively iterate over map in order to programmatically
// generate CSS Custom Properties.
@mixin generate-css-var($key, $value, $name) {
  @if type-of($value) == 'map' {
    @each $nested-type, $nested-value in $value {
      $nested-name: #{$name}-#{$nested-type};
      @if $nested-type == 'base' {
        $nested-name: #{$name};
      }
      @include generate-css-var($nested-type, $nested-value, $nested-name)
    }
  }
  @else {
    --color-#{$name}: #{$value};
  }
}

// Recursively iterate over map in order to programmatically
// generate helper color classes.
@mixin generate-css-color($key, $value, $name) {
  @if type-of($value)=='map' {

    @each $nested-type,
    $nested-value in $value {
      $nested-name: #{$name}-#{$nested-type};

      @if $nested-type=='base' {
        $nested-name: #{$name};
      }

      @include generate-css-color($nested-type, $nested-value, $nested-name)
    }
  }

  @else {
    .bg-#{$name} {
      background-color: var(--color-#{$name});
    }

    .color-#{$name} {
      color: var(--color-#{$name});
    }
  }
}

// Generate the color themes.
:root {
  @each $key, $value in $colors {
    @include generate-css-var($key, $value, #{$key})
  };
};

[data-theme-dark] {
  @each $key, $value in $dark-colors {
    @include generate-css-var($key, $value, #{$key})
  };
}

// Generate the color helper classes.
@if $generate-color-classes {
  @each $key, $value in $colors {
    @include generate-css-color($key, $value, #{$key});
  }
}
