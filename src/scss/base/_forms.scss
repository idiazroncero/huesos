input,
label,
select,
button,
textarea {
    @include form-reset-general();
    max-width:100%;
}

input:-webkit-autofill, 
textarea:-webkit-autofill, 
select:-webkit-autofill {
    box-shadow: 0 0 0px 1000px $webkit-autofill-color inset; 
    color:contrast-color($webkit-autofill-color);
}

input {
    @include form-reset-input();
    &[type=file] {
        border:none;
        width:100%;
        padding:0;
    }
    &[type=range] {
        border:none;
    }
}

input[type=range] {
    -webkit-appearance: none;
    width: 250px;
    margin: 1px 0;
  }
  input[type=range]:focus {
    outline: none;
  }
  input[type=range]::-webkit-slider-runnable-track {
    width: 100%;
    height: 7px;
    cursor: pointer;
    box-shadow: 0px 0px 0px rgba(0, 0, 0, 0), 0px 0px 0px rgba(13, 13, 13, 0);
    background: #000000;
    border-radius: 0px;
    border: 1px solid rgba(0, 0, 0, 0);
  }
  input[type=range]::-webkit-slider-thumb {
    box-shadow: 0px 0px 0px rgba(0, 0, 0, 0), 0px 0px 0px rgba(13, 13, 13, 0);
    border: 0px solid #000000;
    height: 5px;
    width: 15px;
    border-radius: 0px;
    background: #ffffff;
    cursor: pointer;
    -webkit-appearance: none;
  }
  input[type=range]:focus::-webkit-slider-runnable-track {
    background: #0d0d0d;
  }
  input[type=range]::-moz-range-track {
    width: 100%;
    height: 7px;
    cursor: pointer;
    box-shadow: 0px 0px 0px rgba(0, 0, 0, 0), 0px 0px 0px rgba(13, 13, 13, 0);
    background: #000000;
    border-radius: 0px;
    border: 1px solid rgba(0, 0, 0, 0);
  }
  input[type=range]::-moz-range-thumb {
    box-shadow: 0px 0px 0px rgba(0, 0, 0, 0), 0px 0px 0px rgba(13, 13, 13, 0);
    border: 0px solid #000000;
    height: 5px;
    width: 15px;
    border-radius: 0px;
    background: #ffffff;
    cursor: pointer;
  }
  input[type=range]::-ms-track {
    width: 100%;
    height: 7px;
    cursor: pointer;
    background: transparent;
    border-color: transparent;
    color: transparent;
  }
  input[type=range]::-ms-fill-lower {
    background: #000000;
    border: 1px solid rgba(0, 0, 0, 0);
    border-radius: 0px;
    box-shadow: 0px 0px 0px rgba(0, 0, 0, 0), 0px 0px 0px rgba(13, 13, 13, 0);
  }
  input[type=range]::-ms-fill-upper {
    background: #000000;
    border: 1px solid rgba(0, 0, 0, 0);
    border-radius: 0px;
    box-shadow: 0px 0px 0px rgba(0, 0, 0, 0), 0px 0px 0px rgba(13, 13, 13, 0);
  }
  input[type=range]::-ms-thumb {
    box-shadow: 0px 0px 0px rgba(0, 0, 0, 0), 0px 0px 0px rgba(13, 13, 13, 0);
    border: 0px solid #000000;
    height: 5px;
    width: 15px;
    border-radius: 0px;
    background: #ffffff;
    cursor: pointer;
    height: 5px;
  }
  input[type=range]:focus::-ms-fill-lower {
    background: #000000;
  }
  input[type=range]:focus::-ms-fill-upper {
    background: #0d0d0d;
  }

  

select {
    @include form-reset-select();
}

// Button
//
// Either `<input>`, `<button>` or `<a class="button">`
//
// Markup:
// <button class="button {{modifier_class}}">Click!</button>
//
// .button--disabled          - Dims color and deactivates hover to indicate disability.
//
// Styleguide Components.buttons

input[type=submit],
input[type=reset],
input[type=button],
button,
.button {
    @include form-reset-button();
    cursor:pointer;
    border: $button-border;
    background-color: get-color(gray, "white");
    display: inline-block;
    padding: 0 ritmo(2);
    text-transform: uppercase;
    letter-spacing: 0.05rem;
    @include ritmo-font-size($h6-font-size, 5);
    &:hover,
    &:focus {
        background-color:$button-border-color;
        color: contrast-color($button-border-color);
        box-shadow: 3px 3px 0px 0px rgba($button-border-color,0.2);
    }
    &:active {
        box-shadow: 1px 1px 0px 0px rgba($button-border-color,0.2) !important;
    }
    &.button--good {
        color: get-color(state, success);
        border-color: get-color(state, success);
        &:hover,
        &:focus {
            background-color: get-color(state, success);
            color: contrast-color(get-color(state, success));
            border-color: get-color(state, success);
            box-shadow: 3px 3px 0px 0px rgba(get-color(state, success),0.2);
        } 
        &:active {
            box-shadow: 1px 1px 0px 0px get-color(state, success) !important;
        }
    }
    
    &.button--warning {
        color: get-color(state, warning);
        border-color: get-color(state, warning);
        &:hover,
        &:focus {
            background-color: get-color(state, warning);
            color: contrast-color(get-color(state, warning));
            border-color: get-color(state, warning);
            box-shadow: 3px 3px 0px 0px rgba(get-color(state, warning),0.2);
        } 
        &:active {
            box-shadow: 1px 1px 0px 0px get-color(state, warning) !important;
        }
    }
    
    &.button--bad {
        color: get-color(state, error);
        border-color: get-color(state, error);
        &:hover,
        &:focus {
            background-color: get-color(state, error);
            color: contrast-color(get-color(state, error));
            border-color: get-color(state, error);
            box-shadow: 3px 3px 0px 0px rgba(get-color(state, error),0.2);
        } 
        &:active {
            box-shadow: 1px 1px 0px 0px get-color(state, error) !important;
        }
    }
}

input[type=submit][disabled],
input[type=reset][disabled],
input[type=button][disabled],
button[disabled],
.button--disabled {
    opacity: $disabled-opacity;
    &:hover, 
    &:focus {
        background: inherit;
        color: inherit;
    }
}

// Links as buttons
a.button {
    @include kill-link(get-color(text, primary));
    @include kill-link-decoration();
    &:hover,
    &:focus {
        border: $button-border;
        background:$button-border-color;
        color: contrast-color($button-border-color);
    }
}

a.button--disabled {
    &:hover, 
    &:focus {
        background: inherit;
        color: inherit;
    }
}

textarea {
    border: $input-border;
    @include form-reset-textarea();
    width:100%;
    padding: 0 ($spacer / 4);
}

fieldset {
    margin-right:0;
    margin-left:0;
    border: $input-border;
    padding: $spacer;
}

legend {
    font-weight: $bold;
}


// Indicator of typing

input[type="text"],
input[type="password"] {
    &:focus {
        border-bottom-width:2px;
        margin-bottom: -1px;
    }
}