/*
Checkboxes

Can be styled using `$pseudo-checkbox` global variable or the `.pseudo-checkbox` class

Markup:
<div class="form-item">
	<input type="checkbox" id="check" name="check">
	<label for="check">Checkbox normal</label>
</div>
<div class="form-item">
	<input type="checkbox" id="check2" class="pseudo-checkbox" name="check2">
	<label for="check2">Pseudo Checkbox</label>
</div>

Styleguide Forms.checkbox
*/

/*
Radio buttons

Can be styled using `$pseudo-radio` global variable or the `.pseudo-checkbox` class

Markup:
<div class="form-item">
	<input type="radio" id="radio" name="radio">
	<label for="radio">Radio normal</label>
</div>
<div class="form-item">
	<input type="radio" id="radio2" class="pseudo-radio" name="radio">
	<label for="radio2">Pseudo Radio</label>
</div>

Styleguide Forms.radio
*/

input,
label,
select,
button,
textarea {
	@include form-reset-general();
}

label {
	margin-right: $spacer / 2; // Gives some room between inlined labels and inputs
}

input:-webkit-autofill, 
textarea:-webkit-autofill, 
select:-webkit-autofill {
	box-shadow: 0 0 0px 1000px $webkit-autofill-color inset; 
	color:contrast-color($webkit-autofill-color);
}

input {
	/*
	Input
	
	General text input.

	Please note a wrapper with a `.form-item` class is added in order to create separate blocks
	and apply a vertical-rhythm based margin.

	This wrapper also applies a flexbox in order to take the full width of the parent.

	Without this wrapper and class, all the form elements would behave as inline-block elements.

	A wrapper `.form-item--required` adds a marker to let users know the field is mandatory.

	For items with an `input[disabled]`, the recommendation is to mark the whole `.form-item` as `.disabled`
	
	Markup:
	<div class="form-item">
	  <label for="text">Text</label>
	  <input type="text" id="text" name="text">
	</div>
	<div class="form-item form-item--required">
	  <label for="text">Text Required</label>
	  <input required type="text" id="text" name="text">
	</div>
	<div class="form-item disabled">
	  <label for="text">Form item disabled</label>
	  <input disabled type="text" id="text" name="text">
	</div>
	<div class="form-item">
	  <label for="password">Password</label>
	  <input type="password" id="password" name="password">
	</div>
	<div class="form-item">
	  <label for="email">Email</label>
	  <input type="email" id="email" name="email">
	</div>
	<div class="form-item">
	  <label for="url">Web Address</label>
	  <input id="url" type="url" placeholder="http://yoursite.com">
	</div>
	<div class="form-item">
	  <label for="input__phone">Phone Number</label>
	  <input id="input__phone" type="tel" placeholder="(999) 999-9999">
	</div>
	<div class="form-item">
	  <label for="input__search">Search</label>
	  <input id="input__search" type="search" placeholder="Enter Search Term">
	</div>
	
	Styleguide Forms.input
	*/

	@include form-reset-input();

	/*
	File Input
	
	Uses the label for handling click and hides the actual input element.
	Important! Requires the `<label>` to be an inmediate sibling of the `<input>`
	
	Markup:
	<div class="form-item">
		<input type="file" id="file" name="file">
		<label for="file">Upload your file</label>
	</div>
	<div class="form-item">
		<input type="file" id="file" name="file">
		<label for="file"><i class="icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M8 12h4V6h3l-5-5-5 5h3v6zm11.338 1.532c-.21-.224-1.611-1.723-2.011-2.114A1.503 1.503 0 0 0 16.285 11h-1.757l3.064 2.994h-3.544a.274.274 0 0 0-.24.133L12.992 16H7.008l-.816-1.873a.276.276 0 0 0-.24-.133H2.408L5.471 11H3.715c-.397 0-.776.159-1.042.418-.4.392-1.801 1.891-2.011 2.114-.489.521-.758.936-.63 1.449l.561 3.074c.128.514.691.936 1.252.936h16.312c.561 0 1.124-.422 1.252-.936l.561-3.074c.126-.513-.142-.928-.632-1.449z"/></svg></i>Upload your file (with icon!)</label>
	</div>
	
	Styleguide Forms.file
	*/
	&[type=file] {
		@extend %hidden;
		+ label {
			@extend .button;
		}
	}
	// Give an opt-in using a class if pseudo is deactivated
	@if($pseudo-checkbox == false) {
		&[type=checkbox].pseudo-checkbox {
			@include pseudo-checkbox();
		}
	}
	@if($pseudo-radio == false) {
		&[type=radio].pseudo-radio {
			@include pseudo-radio();
		}
	}
}

/*
Select

<span class="tag tag--warning">JS</span> Handles multiple selection using [Selectr](https://github.com/Mobius1/Selectr)

It is applied automatically to all `.js--selectr` inputs on the page. To prevent this, you will need to make your own JS bundle instead of using the common `huesos.js`

Markup:
<div class="form-item">
	<select class="js--selectr">
		<option value="volvo">Volvo</option>
		<option value="saab">Saab</option>
		<option value="mercedes">Mercedes</option>
		<option value="audi">Audi</option>
	</select>
</div>
<div class="form-item">
	<select multiple class="js--selectr">
		<option value="volvo">Volvo</option>
		<option value="saab">Saab</option>
		<option value="mercedes">Mercedes</option>
		<option value="audi">Audi</option>
	</select> 
</div>
<div class="form-item">
	<select class="js--selectr">
		<optgroup label= "Expensive cars">
			<option value="volvo">Volvo</option>
			<option value="saab">Saab</option>
		</optgroup>
		<optgroup label= "Unaffordable cars">
			<option value="mercedes">Mercedes</option>
			<option value="audi">Audi</option>
		</optgroup>
	</select> 
</div>

Styleguide Forms.select
*/

select {
	@include form-reset-select();
}

/*
Textarea

Use in conjunction with `.form-item` and its modifiers (see its own section)

It is recommended to set a minimum rows value of 5. A min-height will prevent textareas from looking too similar to an `input[type="text"]` element.


Markup:
<div class="form-item">
	<label for="area1">Textarea</label>
	<textarea rows="5" id="area1"></textarea>
</div>
<div class="form-item form-item--label-inside">
	<label for="area2">Textarea</label>
	<textarea rows="5" id="area2"></textarea>
</div>
<div class="form-item form-item--label-inside form-item--col">
	<label for="area3">Textarea</label>
	<textarea id="area3"></textarea>
</div>

Styleguide Forms.textarea
*/
textarea {
	border: $input-border;
	@include form-reset-textarea();
	width:100%;
	padding: $input-padding;
	min-height: $spacer * 2;
}

/*
Fieldsets

If either `$disable-fieldset` boolean is set to true or `.fieldset--disabled` class is added, visually hides the fielset box and converts the `<legend>` into a pseudo-heading.

Markup:
<fieldset>
	<legend>Fieldset legend</legend>
	<div class="form-item">
		<label for="item">This is my label</label>
		<input type="email" id="item" placeholder="Email" />
	</div>
	<div class="form-item">
		<label for="item2">This is a second label</label>
		<input type="text" id="item2" value="Text" />
	</div>
</fieldset>
<fieldset class="fieldset--disabled">
	<legend>Fieldset legend</legend>
	<div class="form-item">
		<label for="item">This is my label</label>
		<input type="email" id="item" placeholder="Email" />
	</div>
	<div class="form-item">
		<label for="item2">This is a second label</label>
		<input type="text" id="item2" value="Text" />
	</div>
</fieldset>

Styleguide Forms.fieldset
*/

@if $disable-fieldset {
	fieldset {
		margin-right:0;
		margin-left:0;
		border: none;
		padding: 0;
		legend {
			margin-bottom: $spacer;
			@include minititle($h4-font-size);
		}
	}
} @else {
	fieldset {
		margin-right:0;
		margin-left:0;
		border: $input-border;
		border-radius: $form-border-radius;
		padding: $spacer;
		legend {
			@include minititle($h5-font-size);
		}
	}
	fieldset.fieldset--disabled {
		margin-right:0;
		margin-left:0;
		border: none;
		padding: 0;
		legend {
			margin-bottom: $spacer;
			@include minititle($h4-font-size);
		}
	}
}

/*
Form item wrapper

General block-level wrapper for spacing between items.

It also provides several variations for different styling of items.

.form-item--required		- Marks the label with a red asterisk
.form-item--col				- Stacks elements instead of displaying them side by side
.form-item--label-inside	- Visually puts the label inside of the input. Only makes sense if the border strategy is full
.form-item--label-inside.form-item--required	- `.form-item--required` can be combinated with the other modifiers
.form-item--label-inside.form-item--col	- You can sum `col`and `required` to get this commonly seen pattern

Markup:
<div class="form-item {{modifier_class}}">
	<label for="text">A form item</label>
	<input type="text" id="text" name="text">
</div>

Styleguide Forms.form-item
*/

.form-item {
	margin-bottom : $gutter;
	display:flex;
	align-items:baseline;
	label {
		flex: 0 1 auto;
		@include minititle();
	}
	input[type="text"],
	input[type="email"],
	input[type="password"],
	input[type="url"],
	input[type="tel"],
	input[type="search"] {
		flex: 1 0 auto;
	}

	&:last-child,
	&:last-of-type {
		margin-bottom:0;
	}
}

.form-item--col {
	display:block;
	label, 
	input,
	textarea {
		display:block;
		width:100%;
	}
}

.form-item--required {
	label::after {
		content: "*";
		color: get-color(state, error);
	}
}

.form-item--label-inside {
	border-radius: $form-border-radius;
	@include form-border($input-border-strategy);
	padding: $input-padding;
	input,
	textarea {
		border:none;
		border-radius:0;
		padding:0;
	}
}


