/*
tint($color, $dilution)

Sass Function extracted from compass.  Lightens the $color by mixing it with white as specified by $dilution.

$color - Color to modify
$dilution - % of white to mix
*/

@function tint($color, $dilution: 50) {
	$white: rgba(255, 255, 255, 1);
	@if $color == "transparent" {
	  $color: rgba(0, 0, 0, 0); }
	@if $dilution < 0 or $dilution > 100 {
	  @warn "Dilution #{$dilution} must be between 0 and 100"; }
	$tint-color: mix($color, $white, 100 - $dilution);
	@return $tint-color; 
}

/*
shade($color, $dilution)

Sass Function extracted from compass. Darkens the $color by mixing it with black as specified by $dilution.

$color - Color to modify
$dilution - % of black to mix
*/
  
@function shade($color, $dilution: 50) {
	$black: rgba(0, 0, 0, 1);
	@if $color == "transparent" {
		$color: rgba(0, 0, 0, 0); }
	@if $dilution < 0 or $dilution > 100 {
		@warn "Dilution #{$dilution} must be between 0 and 100"; }
	$shade-color: mix($color, $black, 100 - $dilution);
	@return $shade-color; 
}

/*
contrast-color($color, $dark, $light)

Returns a $dark or $light color value according to the background-color provided as $color.

$color - Background-color to check
$dark  - Dark color to return, defaults to $contrast-dark
$light   - Light color to return, defaults to $contrast-light

Styleguide Functions.Color.ContrastColor
*/

@function contrast-color($color, $dark: $contrast-dark, $light: $contrast-light) {
	@if (lightness($color) > 55) { // 50 is too low
		@return $dark; // Lighter backgorund, return dark color
	} @else {
		@return $light; // Darker background, return light color
	}
}

/*
contrast-links($color)

Returns a link formatted using `$inverse-link-` values from `_config.scss` if needed against the provided background-color.

$color - Background-color to check

Styleguide Mixins.Color.ContrastColor
*/

@mixin contrast-links($color) {
	@if (lightness($color) < 55) { // 50 is too low
		a {
			@include set-link(
				$inverse-link-color,
				$inverse-link-visited,
				$inverse-link-hover,
				$inverse-link-active
			)
		}
	}
}

/*
background-contrast($color)

Given a $color, ensures that all text elements and links are correctly contrasted against that background.

Uses contrast-color($color) SASS function to perform the lightness calculation.

$color - Background-color

Styleguide Mixins.Color.ContrastColor
*/

@mixin background-contrast($color, $include-typography: false) {
	background-color: $color;
	color: contrast-color($color);
	@include contrast-links($color);
	@if $include-typography {
		h1,.h1,
		h2,.h2,
		h3,.h3,
		h4,.h4,
		h5,.h5
		h6,.h6 {
			color:inherit;
		}
	}
}

@mixin background-split-color($color) {
	background-color: lighten-color($color, 70%);
	color: darken-color($color, 50%);
	a {
		@include set-link(
			darken-color($color, 50%),
			darken-color($color, 50%),
			$color,
			darken-color($color, 50%)
		)
	} 
}

@function darken-color($color, $color-modify-ratio: $color-modify-ratio) {
	@return shade($color, $color-modify-ratio);
}

@function lighten-color($color, $color-modify-ratio: $color-modify-ratio) {
	@return tint($color, $color-modify-ratio);
}