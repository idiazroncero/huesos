/*
Grid

Establishes a grid. Uses a float fallback for less capable browsers.

By default, it establishes a 4-col grid. Modifier classes can change this.

No row height is set: it depends on the content.

.grid--2col        - Establishes a 2col grid
.grid--3col        - Establishes a 3col grid
.grid--5col        - Establishes a 5col grid
.grid--6col        - Establishes a 6col grid
.grid--7col        - Establishes a 7col grid
.grid--8col        - Establishes a 8col grid
.grid--9col        - Establishes a 9col grid
.grid--10col       - Establishes a 10col grid
.grid--11col       - Establishes a 11col grid
.grid--12col       - Establishes a 12col grid

Markup:
<div class="grid {{ modifier_class }}">
    <div class="grid-item bg-base-primary" style="height:50px"></div>
    <div class="grid-item bg-base-secondary" style="height:50px""></div>
    <div class="grid-item bg-base-separator" style="height:50px""></div>
    <div class="grid-item bg-text-primary" style="height:50px""></div>
    <div class="grid-item bg-text-mark" style="height:50px""></div>
    <div class="grid-item bg-state-muted" style="height:50px""></div>
    <div class="grid-item bg-state-success" style="height:50px""></div>
    <div class="grid-item bg-state-warning" style="height:50px""></div>
    <div class="grid-item bg-state-error" style="height:50px""></div>
    <div class="grid-item bg-blue-base" style="height:50px""></div>
    <div class="grid-item bg-red-base" style="height:50px""></div>
    <div class="grid-item bg-green-base" style="height:50px""></div>
</div>

Styleguide Layout.grid
*/

.grid {
    @extend %clearfix;
    .grid-item {
        float:left;
        margin-bottom: $spacer;
    }
}

@for $i from 2 through 12 {
    .grid--#{$i}col {
        .grid-item {
            width: (100% / #{$i});
            width: calc( (100% / #{$i}) -  ( ( #{$spacer} * ( #{$i} - 1 ) / #{$i} ) + 0.001rem ) );
            margin-right:$spacer;
            &:nth-child(#{$i}n) {
                margin-right:0;
            }
        }
    }
}


@supports(display:grid) {
    .grid {
        display:grid;
        grid-template-columns: repeat(4, 1fr);
        grid-gap: $spacer;
        &:before,
        &:after {
            display:none;
        }
        .grid-item {
            float:none;
            margin:0;
            width:auto;
        }
    }

    @for $i from 2 through 12 {
        .grid--#{$i}col {
            grid-template-columns: repeat( #{$i} , 1fr);
        }
    }
}

/*
Responsive Grid

Inestad of setting a grid, you can use a set of helper classes to define the specific number of
columns on every breakpoint.

The pattern is as follows: `.grid--[breakpoint]--[number]col`. So, a 11-col grid from `$medium` breakpoint up would be `$grid--medium--11col`.

We follow the mobile-first approach to responsive web design, so you will need to stack your classes understanding that
no `max-width` constraint is set and every breakpoint will be active until a larger breakpoint weighs in.

Markup:
<div class="grid grid--small--2col grid--medium--6col grid--large--3col">
    <div class="grid-item bg-base-primary" style="height:50px"></div>
    <div class="grid-item bg-base-secondary" style="height:50px""></div>
    <div class="grid-item bg-base-separator" style="height:50px""></div>
    <div class="grid-item bg-text-primary" style="height:50px""></div>
    <div class="grid-item bg-text-mark" style="height:50px""></div>
    <div class="grid-item bg-state-muted" style="height:50px""></div>
</div>

Styleguide Layout.grid.responsive
*/

@each $point, $value in $breakpoints {
    @for $i from 2 through 11 {
        .grid--#{$point}--#{$i}col {
            @include breakpoint($value) {
                grid-template-columns: repeat( #{$i} , 1fr);
            }
        }
    }
}


/*
Gutterless Grid

Add `.grid--gutterless` to remove all gutters

Markup:
<div class="grid grid--gutterless grid--small--2col grid--medium--6col grid--large--3col">
    <div class="grid-item bg-base-primary" style="height:50px"></div>
    <div class="grid-item bg-base-secondary" style="height:50px""></div>
    <div class="grid-item bg-base-separator" style="height:50px""></div>
    <div class="grid-item bg-text-primary" style="height:50px""></div>
    <div class="grid-item bg-text-mark" style="height:50px""></div>
    <div class="grid-item bg-state-muted" style="height:50px""></div>
</div>

Styleguide Layout.grid.gutterless
*/

.grid--gutterless {
    grid-gap: 0;
}